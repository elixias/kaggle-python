distinct 
count #returns non missing

SELECT COUNT(DISTINCT birthdate)
FROM people;

<> not equal
release_year >= 1990 and release_year <= 2000; #use BETWEEN, is inclusive of the ranges
where _ in (..,..) #don't have to use so many 'OR'
IS NULL/IS NOT NULL
LIKE/NOT LIKE '_Data%' #_ for single character

#Aggregate functions
SELECT AVG/SUM/MAX/MIN/COUNT(budget) FROM films;

#typecasting
SELECT temp * CAST(wind_speed as integer) as wind_chill FROM weather;

#structured query
#aliasing (as)

GROUP BY #goes first before ORDER BY
ORDER BY #naturally ascending

#can't use group by with where
#need to use HAVING

#select table_schema, table_name from information_schema.tables
#select table_schema, table_name from information_schema.columns
SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';
SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'university_professors' AND table_schema = 'public';

CREATE TABLE <tablename> (
column_x integer PRIMARY KEY,
column_a text not null,
column_b UNIQUE,
column_c char(5)
//PRIMARY KEY (a,c)
//column_x integer UNIQUE NOT NULL
column integer references tablename (name) ON DELETE NO ACTION//foreign keys ON DELETE CASCADE, SET NULL, SET DEFAULT, RESTRICT
);

ALTER TABLE university ADD COLUMN university_shortname text;
ALTER TABLE university ADD COLUMN id serial PRIMARY KEY; //serial
ALTER TABLE university RENAME COLUMN oldname TO newname;
ALTER TABLE university DROP COLUMN column;
ALTER TABLE students ALTER COLUMN column TYPE varchar(128);
ALTER TABLE students ALTER COLUMN averagegrd TYPE integer USING ROUND(averagegrd);
ALTER TABLE table_name ALTER COLUMN column_name TYPE varchar(x) USING SUBSTRING(column_name FROM 1 FOR x);
ALTER TABLE students ALTER column SET/DROP NOT NULL
ALTER TABLE students ADD CONSTRAINT somename UNIQUE(col name);
ALTER TABLE students ADD CONSTRAINT somename PRIMARY KEY (col name);
ALTER TABLE tablename ADD COLUMN columnc varchar(256); UPDATE tablename SET columnc = CONCAT(a,b); ALTER TABLE tablename ADD CONSTRAINT pk PRIMARY KEY (columnc);
ALTER TABLE tbl ADD CONSTRAINT afkey FOREIGN KEY (b_id) REFERENCES b(id)
DROP TABLE <tablename>

INSERT INTO <> 
	SELECT DISTINCT organization, organization_sector
	FROM university_professors;

INSERT INTO <tablename> (column_a, column_b) VALUES ('a','b')

#integrity constraints
#	attributes - data types (text, varchar[] (up to max chars), char[] (fixed chars), boolean)
#							date, time, timestamp, numeric(3,2), integer
#	key constraints - primary keys
#	referential integrity - foreign keys

#foreign key constraints cannot be altered
#need to be deleted
#dive into information_schema to find the name of the constraint
SELECT constraint_name, table_name, constraint_type
FROM information_schema.table_constraints
WHERE constraint_type = 'FOREIGN KEY';

ALTER TABLE affiliations
DROP CONSTRAINT affiliations_organization_id_fkey;

#inner join
select p1.cola, colb from tablea as p1 inner join table b as p2 on p1.colc = p2.colc AND p1.cold = p2.cold

#when the ids used to join tables are same, you can use keyword USING
SELECT lefttbl.id, lefttbl.val, righttbl.val FROM lefttbl INNER JOIN righttbl USING (id)

#joining with self: tbl as tblself, tbl as tblanotherself

#using CASE
SELECT name, continent, code, surface_area,
    CASE WHEN surface_area > 2000000
            THEN 'large'
       WHEN surface_area > 350000
            THEN 'medium'
       ELSE 'small' END
       AS geosize_group
INTO countries_plus #into a new table
FROM countries;

INNER JOIN, SELF JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, CROSS JOIN (Every possible combination)
#UNIONS *STACKS* the *ROWS*, and *ignores duplicates* (use UNION ALL to include dups)
INTERSECT
EXCEPT - excludes similar records if found on the right side

USING (___), ON 

#semi joins 
#filtering first table using values from 2nd table
#example: ... WHERE  country in (SELECT name FROM country)
#and anti joins (NOT IN)

#subqueries in WHERE
select name, country_code, urbanarea_pop
  from cities
where name IN
  (select capital from countries)
ORDER BY urbanarea_pop DESC;

#this one confuses me subquery in SELECT
SELECT countries.name AS country,
  (SELECT COUNT(*)
   FROM cities
   WHERE countries.code = cities.country_code) AS cities_num
FROM countries
ORDER BY cities_num DESC, country
LIMIT 9;

#subquery in FROM
